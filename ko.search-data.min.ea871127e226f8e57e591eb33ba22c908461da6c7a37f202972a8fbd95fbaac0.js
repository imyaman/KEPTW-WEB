'use strict';(function(){const indexCfg={encode:false,tokenize:function(str){return str.replace(/[\x00-\x7F]/g,'').split('');}};indexCfg.doc={id:'id',field:['title','content'],store:['title','href'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/kakao_i/apiref/','title':"API 레퍼런스",'content':"소개 #  "});index.add({'id':1,'href':'/kakao_i/','title':"Kakao i",'content':"소개 #  Kakao i의 한글 표기는 카카오 i 입니다. 표기에 주의해주십시오.\nKakao i Engine 하위 문서의 수가 많아 상품별 첫 화면에 분류 표시함 Kakao Work 하위 문서의 수가 많지 않아 상품별 첫 화면에 바로 문서 목록 표시함 기본은 분류만 표시하고, 분류를 클릭하면 확장되도록 함. 예를 들면 아코디언 형태로.\nSDK #   Android용 SDK iOS용 SDK Web용 SDK  API 레퍼런스 #   a b c  "});index.add({'id':2,'href':'/kakao_work/1.0/messageblock/','title':"Message Block",'content':"Block Kit #  Quondam non pater est dignior ille Eurotas #  Latent te facies #  Lorem markdownum arma ignoscas vocavit quoque ille texit mandata mentis ultimus, frementes, qui in vel. Hippotades Peleus pennas conscia cuiquam Caeneus quas.\n Pater demittere evincitque reddunt Maxime adhuc pressit huc Danaas quid freta Soror ego Luctus linguam saxa ultroque prior Tatiumque inquit Saepe liquitur subita superata dederat Anius sudor  Cum honorum Latona #  O fallor in sustinui iussorum equidem. Nymphae operi oris alii fronde parens dumque, in auro ait mox ingenti proxima iamdudum maius?\nreality(burnDocking(apache_nanometer), pad.property_data_programming.sectorBrowserPpga(dataMask, 37, recycleRup)); intellectualVaporwareUser += -5 * 4; traceroute_key_upnp /= lag_optical(android.smb(thyristorTftp)); surge_host_golden = mca_compact_device(dual_dpi_opengl, 33, commerce_add_ppc); if (lun_ipv) { verticalExtranet(1, thumbnail_ttl, 3); bar_graphics_jpeg(chipset - sector_xmp_beta); }  Fronde cetera dextrae sequens pennis voce muneris #  Acta cretus diem restet utque; move integer, oscula non inspirat, noctisque scelus! Nantemque in suas vobis quamvis, et labori!\nvar runtimeDiskCompiler = home - array_ad_software; if (internic \u0026gt; disk) { emoticonLockCron += 37 + bps - 4; wan_ansi_honeypot.cardGigaflops = artificialStorageCgi; simplex -= downloadAccess; } var volumeHardeningAndroid = pixel + tftp + onProcessorUnmount; sector(memory(firewire + interlaced, wired));  "});index.add({'id':3,'href':'/kakao_work/current/messageblock/','title':"Message Block",'content':"Block Kit #  Quondam non pater est dignior ille Eurotas #  Latent te facies #  Lorem markdownum arma ignoscas vocavit quoque ille texit mandata mentis ultimus, frementes, qui in vel. Hippotades Peleus pennas conscia cuiquam Caeneus quas.\n Pater demittere evincitque reddunt Maxime adhuc pressit huc Danaas quid freta Soror ego Luctus linguam saxa ultroque prior Tatiumque inquit Saepe liquitur subita superata dederat Anius sudor  Cum honorum Latona #  O fallor in sustinui iussorum equidem. Nymphae operi oris alii fronde parens dumque, in auro ait mox ingenti proxima iamdudum maius?\nreality(burnDocking(apache_nanometer), pad.property_data_programming.sectorBrowserPpga(dataMask, 37, recycleRup)); intellectualVaporwareUser += -5 * 4; traceroute_key_upnp /= lag_optical(android.smb(thyristorTftp)); surge_host_golden = mca_compact_device(dual_dpi_opengl, 33, commerce_add_ppc); if (lun_ipv) { verticalExtranet(1, thumbnail_ttl, 3); bar_graphics_jpeg(chipset - sector_xmp_beta); }  Fronde cetera dextrae sequens pennis voce muneris #  Acta cretus diem restet utque; move integer, oscula non inspirat, noctisque scelus! Nantemque in suas vobis quamvis, et labori!\nvar runtimeDiskCompiler = home - array_ad_software; if (internic \u0026gt; disk) { emoticonLockCron += 37 + bps - 4; wan_ansi_honeypot.cardGigaflops = artificialStorageCgi; simplex -= downloadAccess; } var volumeHardeningAndroid = pixel + tftp + onProcessorUnmount; sector(memory(firewire + interlaced, wired));  "});index.add({'id':4,'href':'/kakao_i/sdk/','title':"SDK",'content':"소개 #  "});index.add({'id':5,'href':'/kakao_work/block-kit-1/intro/','title':"시작하기",'content':"시작하기 #  Block Kit 시작하기 #  Block Kit(블록 킷)은 카카오워크에서 단순하지만 강력한 인터랙션을 사용자가 경험할 수 있도록 제공하는 UI 프레임워크를 말합니다. 이 블록들을 1개부터 n개까지 쌓아올려 만든 말풍선을 조합형 말풍선이라고 정의하며, 다양한 블록들을 조합함으로써 좀 더 효과적으로 서비스별 Bot 특성에 맞춰 메시지를 커스터마이징 할 수 있습니다.\n블록 #  카카오워크 Block Kit 속성\n블록(Block)은 메시지를 구성하는 기본 단위이며, 모든 블록 타입은 1개 이상의 역할을 가지고 있습니다. 엘리먼트(Element)는 블록 타입에 따라 다른 블록과 조합될 수 있는 블록을 의미합니다. 이렇게 다양한 종류의 엘리먼트가 조합되어 레이아웃 블록(Layout Block)으로 구성됩니다. 즉, 다양한 엘리먼트들로 구성한 Block Kit을 레이아웃 블록이라고 말합니다. 예를 들어, 버튼 블록 2개를 조합하면 버튼 2개가 각각의 행으로 표시된 메시지가 됩니다. 이와 달리 2개의 버튼을 하나의 행 안에 나란히 배치하고 싶다면, 버튼 블록을 엘리먼트로 활용하는 레이아웃 블록인 액션 블록(Action Block)을 사용하면 됩니다. 각 블록에 대한 구체적인 설명 및 예시는 해당 블록을 설명하는 챕터에서 확인할 수 있습니다.\n표. 카카오워크의 Block Kit #     블록타입 블록 엘리먼트 레이아웃 블록 조합가능 엘리먼트     Text Block O O X    Button Block O O X    Image Link Block O O X    Divider Block O X X    Action Block X X X Button Block     문서 끝. 이하 샘플\nCognita laeva illo fracta #  Lorem markdownum pavent auras, surgit nunc cingentibus libet Laomedonque que est. Pastor An arbor filia foedat, ne fugit aliter, per. Helicona illas et callida neptem est Oresitrophos caput, dentibus est venit. Tenet reddite famuli praesentem fortibus, quaeque vis foret si frondes gelidos gravidae circumtulit inpulit armenta nativum.\n Te at cruciabere vides rubentis manebo Maturuit in praetemptat ruborem ignara postquam habitasse Subitarum supplevit quoque fontesque venabula spretis modo Montis tot est mali quasque gravis Quinquennem domus arsit ipse Pellem turis pugnabant locavit  Natus quaerere #  Pectora et sine mulcere, coniuge dum tincta incurvae. Quis iam; est dextra Peneosque, metuis a verba, primo. Illa sed colloque suis: magno: gramen, aera excutiunt concipit.\n Phrygiae petendo suisque extimuit, super, pars quod audet! Turba negarem. Fuerat attonitus; et dextra retinet sidera ulnas undas instimulat vacuae generis? Agnus dabat et ignotis dextera, sic tibi pacis feriente at mora euhoeque comites hostem vestras Phineus. Vultuque sanguine dominoque metuit risi fama vergit summaque meus clarissimus artesque tinguebat successor nominis cervice caelicolae.\n Limitibus misere sit #  Aurea non fata repertis praerupit feruntur simul, meae hosti lentaque citius levibus, cum sede dixit, Phaethon texta. Albentibus summos multifidasque iungitur loquendi an pectore, mihi ursaque omnia adfata, aeno parvumque in animi perlucentes. Epytus agis ait vixque clamat ornum adversam spondet, quid sceptra ipsum est. Reseret nec; saeva suo passu debentia linguam terga et aures et cervix de ubera. Coercet gelidumque manus, doluit volvitur induta?\nEnim sua #  Iuvenilior filia inlustre templa quidem herbis permittat trahens huic. In cruribus proceres sole crescitque fata, quos quos; merui maris se non tamen in, mea.\nGermana aves pignus tecta #  Mortalia rudibusque caelum cognosceret tantum aquis redito felicior texit, nec, aris parvo acre. Me parum contulerant multi tenentem, gratissime suis; vultum tu occupat deficeret corpora, sonum. E Actaea inplevit Phinea concepit nomenque potest sanguine captam nulla et, in duxisses campis non; mercede. Dicere cur Leucothoen obitum?\nPostibus mittam est nubibus principium pluma, exsecratur facta et. Iunge Mnemonidas pallamque pars; vere restitit alis flumina quae quoque, est ignara infestus Pyrrha. Di ducis terris maculatum At sede praemia manes nullaque!\n"});index.add({'id':6,'href':'/kakao_work/1.0/bot-stepbystep/','title':"020301_Bot 시작 가이드",'content':"Bot 시작 가이드 #  Bot 생성 및 등록 #  고객사는 카카오워크 확장플랫폼에 등록된 서비스를 바로 이용할 수 있지만, 직접 Bot 애플리케이션을 개발하고 등록하는 것도 가능합니다.\n카카오워크의 확장플랫폼에 Bot을 등록하려면 아래 테이블을 참고하여 필수 정보를 작성하고, 하나의 파일로 압축하여 카카오워크 담당자 이메일(kakaowork_platform@kakaoenterprise.com)로 발송해야 합니다. 모든 데이터가 정상적으로 등록되면 카카오워크 담당자는 영업일 기준 3일 이내, API 호출에 필요한 Access Token을 이메일로 회신합니다.\nBot 인증 #  Bot 등록 과정에서 전달받은 인증토큰(Access Token)을 HTTP 요청(Request)의 Authorization 헤더를 통해 전달하여 어떤 Bot에서 받은 요청인지 인증 및 권한을 검사해야 합니다. 아래 순서에 따라 Bot 인증을 요청합니다.\n:::info\n Bot 생성 및 등록 후, Access Token을 발급받습니다. Request 헤더의 Authorization에 Access Token을 추가합니다. Request 파라미터를 작성하고 실행합니다. :::  :::info 자세한 Bot 인증 방식은 Web API 레퍼런스 문서의 API 요청 챕터를 참고합니다. :::\nLorem markdownum arma ignoscas vocavit quoque ille texit mandata mentis ultimus, frementes, qui in vel. Hippotades Peleus pennas conscia cuiquam Caeneus quas.\n Pater demittere evincitque reddunt Maxime adhuc pressit huc Danaas quid freta Soror ego Luctus linguam saxa ultroque prior Tatiumque inquit Saepe liquitur subita superata dederat Anius sudor  Cum honorum Latona #  O fallor in sustinui iussorum equidem. Nymphae operi oris alii fronde parens dumque, in auro ait mox ingenti proxima iamdudum maius?\nreality(burnDocking(apache_nanometer), pad.property_data_programming.sectorBrowserPpga(dataMask, 37, recycleRup)); intellectualVaporwareUser += -5 * 4; traceroute_key_upnp /= lag_optical(android.smb(thyristorTftp)); surge_host_golden = mca_compact_device(dual_dpi_opengl, 33, commerce_add_ppc); if (lun_ipv) { verticalExtranet(1, thumbnail_ttl, 3); bar_graphics_jpeg(chipset - sector_xmp_beta); }  Fronde cetera dextrae sequens pennis voce muneris #  Acta cretus diem restet utque; move integer, oscula non inspirat, noctisque scelus! Nantemque in suas vobis quamvis, et labori!\nvar runtimeDiskCompiler = home - array_ad_software; if (internic \u0026gt; disk) { emoticonLockCron += 37 + bps - 4; wan_ansi_honeypot.cardGigaflops = artificialStorageCgi; simplex -= downloadAccess; } var volumeHardeningAndroid = pixel + tftp + onProcessorUnmount; sector(memory(firewire + interlaced, wired));  "});index.add({'id':7,'href':'/kakao_work/current/bot-stepbystep/','title':"020301_Bot 시작 가이드",'content':"Bot 시작 가이드 #  Bot 생성 및 등록 #  고객사는 카카오워크 확장플랫폼에 등록된 서비스를 바로 이용할 수 있지만, 직접 Bot 애플리케이션을 개발하고 등록하는 것도 가능합니다.\n카카오워크의 확장플랫폼에 Bot을 등록하려면 아래 테이블을 참고하여 필수 정보를 작성하고, 하나의 파일로 압축하여 카카오워크 담당자 이메일(kakaowork_platform@kakaoenterprise.com)로 발송해야 합니다. 모든 데이터가 정상적으로 등록되면 카카오워크 담당자는 영업일 기준 3일 이내, API 호출에 필요한 Access Token을 이메일로 회신합니다.\nBot 인증 #  Bot 등록 과정에서 전달받은 인증토큰(Access Token)을 HTTP 요청(Request)의 Authorization 헤더를 통해 전달하여 어떤 Bot에서 받은 요청인지 인증 및 권한을 검사해야 합니다. 아래 순서에 따라 Bot 인증을 요청합니다.\n:::info\n Bot 생성 및 등록 후, Access Token을 발급받습니다. Request 헤더의 Authorization에 Access Token을 추가합니다. Request 파라미터를 작성하고 실행합니다. :::  :::info 자세한 Bot 인증 방식은 Web API 레퍼런스 문서의 API 요청 챕터를 참고합니다. :::\nLorem markdownum arma ignoscas vocavit quoque ille texit mandata mentis ultimus, frementes, qui in vel. Hippotades Peleus pennas conscia cuiquam Caeneus quas.\n Pater demittere evincitque reddunt Maxime adhuc pressit huc Danaas quid freta Soror ego Luctus linguam saxa ultroque prior Tatiumque inquit Saepe liquitur subita superata dederat Anius sudor  Cum honorum Latona #  O fallor in sustinui iussorum equidem. Nymphae operi oris alii fronde parens dumque, in auro ait mox ingenti proxima iamdudum maius?\nreality(burnDocking(apache_nanometer), pad.property_data_programming.sectorBrowserPpga(dataMask, 37, recycleRup)); intellectualVaporwareUser += -5 * 4; traceroute_key_upnp /= lag_optical(android.smb(thyristorTftp)); surge_host_golden = mca_compact_device(dual_dpi_opengl, 33, commerce_add_ppc); if (lun_ipv) { verticalExtranet(1, thumbnail_ttl, 3); bar_graphics_jpeg(chipset - sector_xmp_beta); }  Fronde cetera dextrae sequens pennis voce muneris #  Acta cretus diem restet utque; move integer, oscula non inspirat, noctisque scelus! Nantemque in suas vobis quamvis, et labori!\nvar runtimeDiskCompiler = home - array_ad_software; if (internic \u0026gt; disk) { emoticonLockCron += 37 + bps - 4; wan_ansi_honeypot.cardGigaflops = artificialStorageCgi; simplex -= downloadAccess; } var volumeHardeningAndroid = pixel + tftp + onProcessorUnmount; sector(memory(firewire + interlaced, wired));  "});index.add({'id':8,'href':'/kakao_work/block-kit-1/','title':"Block Kit 구성 및 정책",'content':"Appendix A. 조합형 말풍선 예시 #  Block Kit 구성 및 정책\nA-1. Welcome 메시지 #   아래 예시는 카카오워크의 업무 도구 중 구글 캘린더 Bot을 사용자가 연결했을 때, 구글 캘린더 Bot과의 1:1 채팅방에 자동으로 전송되는 Welcome(웰컴) 메시지입니다.\nhttps://lh5.googleusercontent.com/2eY2wvS6uD9Jh4J1LFmXqATpNR9w_kWDaxItz8f4EsVK3iH-ESdCYKT6XJ7PTKzclW73Of7x1-XqnLsC9K3DWig3PQOE96e_FDclILf_N6MLtQQ0h0VmJdMlQlut09doSPJZGvhy\n그림. Welcome 메시지\n{ \u0026#34;text\u0026#34;: \u0026#34;이제 구글 캘린더 Bot으로 보다 똑똑하게, 캘린더 기능을 이용해보세요.\u0026#34;, \u0026#34;blocks\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;image_link\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;https://sample_image.kakaowork.com/welcome-240x120jpeg\u0026#34; }, { \u0026#34;type\u0026#34;: \u0026#34;text\u0026#34;, \u0026#34;text\u0026#34;: \u0026#34;이제 구글 캘린더 Bot으로 보다 똑똑하게, 캘린더 기능을 이용해보세요. 일정 알림, 오늘의 일정 등을 Bot을 통해 쉽게 확인할 수 있습니다.\u0026#34;, \u0026#34;markdown\u0026#34;: false }, { \u0026#34;type\u0026#34;: \u0026#34;button\u0026#34;, \u0026#34;text\u0026#34;: \u0026#34;설정하기\u0026#34;, \u0026#34;style\u0026#34;: \u0026#34;default\u0026#34; \u0026#34;action_type\u0026#34;: \u0026#34;open_system_browser\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;http://example.com/details/999\u0026#34; } ] } A-2. 일정 초대 알림 메시지 #   아래 예시는 사용자가 카카오워크에서 제공하는 구글 캘린더 Bot을 사용하는 경우 발송되는 일정초대 알림 메시지입니다. 이 알림 메시지에서 하나의 긴 버튼은 버튼 블록으로, 하나의 행 안에 여러 개의 버튼을 포함하는 경우에는 Action Block으로 메시지를 구성하였습니다. 각각의 버튼을 사용자가 선택했을 때, 구글 캘린더의 일정 상세 화면으로 이동하거나 또는 참석 여부를 서버 간 통신으로 전달하는 추가적인 동작들이 일어나도록 설계되어 있습니다.\nhttps://lh4.googleusercontent.com/OXc2piGp7JHDDUV8W-dVV2pdn6TqYUxvK_PmqdzrTa_z8Jr6wv7ftJC7JGaJD2RODNz9i7A-l51oV4m19rwyI6GZD7MUiKtMrKMH6EGq65tAotmIMXHLykLelXZ7ERkCg3Wqeier\n그림. 일정 초대 알림 메시지\n참고\n 현재 예시에 포함된 Button Block 중 **[자세히 보기]**와 같은 링크 이동형 버튼만 제공됩니다. [수락/거절/미정] 버튼과 같이 지정된 URL로 사용자가 선택한 값이 전달되는 등의 Action에 대한 API는 추후 제공될 예정입니다.  { \u0026#34;text\u0026#34;: \u0026#34;다음 일정에 초대되었습니다\u0026#34;, \u0026#34;blocks\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;text\u0026#34;, \u0026#34;text\u0026#34;: \u0026#34;*다음 일정에 초대되었습니다*\u0026#34;, \u0026#34;markdown\u0026#34;: true }, { \u0026#34;type\u0026#34;: \u0026#34;divider\u0026#34; }, { \u0026#34;type\u0026#34;: \u0026#34;text\u0026#34;, \u0026#34;text\u0026#34;: \u0026#34;*서비스 정책회의 - 기획 논의*\u0026#34;, \u0026#34;markdown\u0026#34;: true }, { \u0026#34;type\u0026#34;: \u0026#34;description\u0026#34;, \u0026#34;term\u0026#34;: \u0026#34;일시\u0026#34;, \u0026#34;content\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;text\u0026#34;, \u0026#34;text\u0026#34;: \u0026#34;17:00~19:00\u0026#34;, \u0026#34;markdown\u0026#34;: true }, \u0026#34;accent\u0026#34;: true }, { \u0026#34;type\u0026#34;: \u0026#34;description\u0026#34;, \u0026#34;term\u0026#34;: \u0026#34;장소\u0026#34;, \u0026#34;content\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;text\u0026#34;, \u0026#34;text\u0026#34;: \u0026#34;[판교] N9층 버드bird\u0026#34;, \u0026#34;markdown\u0026#34;: true }, \u0026#34;accent\u0026#34;: true }, { \u0026#34;type\u0026#34;: \u0026#34;button\u0026#34;, \u0026#34;text\u0026#34;: \u0026#34;자세히 보기\u0026#34;, \u0026#34;style\u0026#34;: \u0026#34;default\u0026#34; \u0026#34;action_type\u0026#34;: \u0026#34;open_system_browser\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;http://example.com/details/999\u0026#34; }, { \u0026#34;type\u0026#34;: \u0026#34;divider\u0026#34; }, { \u0026#34;type\u0026#34;: \u0026#34;text\u0026#34;, \u0026#34;text\u0026#34;: \u0026#34;*참석 하시겠습니까?*\u0026#34;, \u0026#34;markdown\u0026#34;: true }, { \u0026#34;type\u0026#34;: \u0026#34;action\u0026#34;, \u0026#34;elements\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;button\u0026#34;, \u0026#34;text\u0026#34;: \u0026#34;수락\u0026#34;, \u0026#34;style\u0026#34;: \u0026#34;default\u0026#34; }, { \u0026#34;type\u0026#34;: \u0026#34;button\u0026#34;, \u0026#34;text\u0026#34;: \u0026#34;거절\u0026#34;, \u0026#34;style\u0026#34;: \u0026#34;default\u0026#34; }, { \u0026#34;type\u0026#34;: \u0026#34;button\u0026#34;, \u0026#34;text\u0026#34;: \u0026#34;미정\u0026#34;, \u0026#34;style\u0026#34;: \u0026#34;default\u0026#34; } ] } ] } A-3. 전자결재 요청 메시지 #   아래 예시는 가상의 전자결재 서비스를 카카오워크에 Bot의 형태로 연결했을 때 발생하는 알림 메시지입니다. 알림 메시지의 수신자가 결재 유형을 한 눈에 파악할 수 있도록 컬러 스타일이 지정된 헤더 블록을 사용하고, 승인과 반려라는 각각의 버튼에 스타일을 지정하여 표현했습니다. 기안자 및 문서 넘버에는 마크다운 링크를 통하여 해당 전자결재 문서 또는 사용자 정보를 확인할 수 있는 페이지로 이동할 수 있도록 구성했습니다.\nhttps://lh4.googleusercontent.com/pXSRJ8zi6wBKTjZpc5mnXwVW6nqaYCX8YNKS1snIrrUlHHPY4F-NXmiSpzy096KXvaRrhz4PydUifSWkUj6GgOzqYqTUwghJQy_SlylLCKfLdECxAZDPZsprjv-dx60TZCvrK6YH\n그림. 전자결재 요청 메시지\n{ \u0026#34;text\u0026#34;: \u0026#34;내게 요청 온 결재\u0026#34;, \u0026#34;blocks\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;header\u0026#34;, \u0026#34;text\u0026#34;: \u0026#34;내게 요청 온 결재\u0026#34;, \u0026#34;style\u0026#34;: \u0026#34;red\u0026#34; }, { \u0026#34;type\u0026#34;: \u0026#34;text\u0026#34;, \u0026#34;text\u0026#34;: \u0026#34;*[결재요청] 회원 약관, 개인정보 처리방침 법무 검토 요청*\u0026#34;, \u0026#34;markdown\u0026#34;: true }, { \u0026#34;type\u0026#34;: \u0026#34;divider\u0026#34; }, { \u0026#34;type\u0026#34;: \u0026#34;description\u0026#34;, \u0026#34;term\u0026#34;: \u0026#34;기안자\u0026#34;, \u0026#34;content\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;text\u0026#34;, \u0026#34;text\u0026#34;: \u0026#34;[김지석 (Jay)](https://deeplink.sample.com)\u0026#34;, \u0026#34;markdown\u0026#34;: true }, \u0026#34;accent\u0026#34;: false }, { \u0026#34;type\u0026#34;: \u0026#34;divider\u0026#34; }, { \u0026#34;type\u0026#34;: \u0026#34;description\u0026#34;, \u0026#34;term\u0026#34;: \u0026#34;Type\u0026#34;, \u0026#34;content\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;text\u0026#34;, \u0026#34;text\u0026#34;: \u0026#34;법무 검토 요청서\u0026#34;, \u0026#34;markdown\u0026#34;: true }, \u0026#34;accent\u0026#34;: false }, { \u0026#34;type\u0026#34;: \u0026#34;description\u0026#34;, \u0026#34;term\u0026#34;: \u0026#34;Title\u0026#34;, \u0026#34;content\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;text\u0026#34;, \u0026#34;text\u0026#34;: \u0026#34;회원 약관, 개인정보 처리방침 법무 검토 요청\u0026#34;, \u0026#34;markdown\u0026#34;: true }, \u0026#34;accent\u0026#34;: false }, { \u0026#34;type\u0026#34;: \u0026#34;description\u0026#34;, \u0026#34;term\u0026#34;: \u0026#34;Number\u0026#34;, \u0026#34;content\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;text\u0026#34;, \u0026#34;text\u0026#34;: \u0026#34;[20200401-PR-0024](https://sample.link.com)\u0026#34;, \u0026#34;markdown\u0026#34;: true }, \u0026#34;accent\u0026#34;: false }, { \u0026#34;type\u0026#34;: \u0026#34;action\u0026#34;, \u0026#34;elements\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;button\u0026#34;, \u0026#34;text\u0026#34;: \u0026#34;승인\u0026#34;, \u0026#34;style\u0026#34;: \u0026#34;primary\u0026#34; }, { \u0026#34;type\u0026#34;: \u0026#34;button\u0026#34;, \u0026#34;text\u0026#34;: \u0026#34;반려\u0026#34;, \u0026#34;style\u0026#34;: \u0026#34;default\u0026#34; } ] } ] }  문서 끝. 이하 샘플\nQuondam non pater est dignior ille Eurotas #  Latent te facies #  Lorem markdownum arma ignoscas vocavit quoque ille texit mandata mentis ultimus, frementes, qui in vel. Hippotades Peleus pennas conscia cuiquam Caeneus quas.\n Pater demittere evincitque reddunt Maxime adhuc pressit huc Danaas quid freta Soror ego Luctus linguam saxa ultroque prior Tatiumque inquit Saepe liquitur subita superata dederat Anius sudor  Cum honorum Latona #  O fallor in sustinui iussorum equidem. Nymphae operi oris alii fronde parens dumque, in auro ait mox ingenti proxima iamdudum maius?\nreality(burnDocking(apache_nanometer), pad.property_data_programming.sectorBrowserPpga(dataMask, 37, recycleRup)); intellectualVaporwareUser += -5 * 4; traceroute_key_upnp /= lag_optical(android.smb(thyristorTftp)); surge_host_golden = mca_compact_device(dual_dpi_opengl, 33, commerce_add_ppc); if (lun_ipv) { verticalExtranet(1, thumbnail_ttl, 3); bar_graphics_jpeg(chipset - sector_xmp_beta); }  Fronde cetera dextrae sequens pennis voce muneris #  Acta cretus diem restet utque; move integer, oscula non inspirat, noctisque scelus! Nantemque in suas vobis quamvis, et labori!\nvar runtimeDiskCompiler = home - array_ad_software; if (internic \u0026gt; disk) { emoticonLockCron += 37 + bps - 4; wan_ansi_honeypot.cardGigaflops = artificialStorageCgi; simplex -= downloadAccess; } var volumeHardeningAndroid = pixel + tftp + onProcessorUnmount; sector(memory(firewire + interlaced, wired));  "});index.add({'id':9,'href':'/kakao_i/sdk_for_wallpad_kor/startup/','title':"시작하기",'content':"시작하기 #  이 문서는 Wallpad 디바이스에서 Kakao i 음성 인식 서비스를 사용하기 위하여 Kakao i SDK for Wallpad를 이용한 개발 가이드로서, 고객사의 개발자를 대상으로 작성되었습니다.\nKakao i SDK for Wallpad는 기본적으로 사용자의 음성 명령을 입력받고, 명령어를 분석하여 사용자 요청에 맞는 응답(음성 또는 UI)을 출력하는 기능을 제공합니다.\n참고\n 이 문서는 Kakao i Android SDK Version 1.2.4.18를 기반으로 작성되었으며, Android API 21을 필요로 합니다.  Kakao i SDK 구성 요소 #  Kakao i SDK for Wallpad의 구성 요소는 다음과 같습니다.\n표1. Kakao i SDK for Wallpad의 구성요소\n   구성요소 설명     Kakao i Agent 음성 인식 및 인식 상태 전달 등 음성 인식의 주요 기능을 포함하는 모듈입니다.   Kakao i Client Kakao i 서버와 SDK의 연동을 위해, 음성 인식 데이터와 음성 인식 상태 정보를 Kakao i 서버와 송신 및 수신할 때 사용되는 연동 관련 모듈입니다.   AppClient Application의 통신 관련 설정을 할 수 있는 모듈입니다.   Auditorium 사용자의 음성 명령을 녹음하고, 녹음된 결과(오디오 버퍼)를 필요한 곳에 공급하는 음성 입력 관련 모듈입니다.   Dialoid(Wake-up) Wake-Up 명령어를 설정하고, 인식된 발화 음성 상태 및 정보를 확인할 수 있는 음성 발화 모듈입니다.   Kapi Adapter Kakao i 음성 인식 서비스 인증 관련 모듈입니다.   PhoneCall Manager 전화 걸기 관련 모듈입니다. Wallpad에서 기능 구현 시, Kakao i PM에 문의 부탁드립니다.    주의\n Kakao i 음성 인식 서비스는 Kakao 서비스와 구분되는 별도의 서비스입니다. Kakao i 음성 인식 서비스를 이용하기 위해서는 헤이카카오 서비스에 가입이 필요하며, 헤이카카오 서비스는 카카오 계정을 통해 가입할 수 있습니다.  인터랙션 시나리오 #  다음은 사용자가 “오늘 날씨 알려줘\u0026quot;라는 음성 명령을 발화했을 때, 사용자, 벤더 애플리케이션, SDK 간의 인터랙션을 정리한 시나리오입니다.\n Wallpad 디바이스에서 Kakao i SDK for Wallpad를 사용하기 위해 SDK 초기화를 수행합니다. 사용자가 Wake-up word(호출명령어)인 “헤이 카카오!”를 발화하면, SDK는 발화 명령어를 인식하고 발화 효과음을 재생하여 사용자에게 명령어를 입력 받을 수 있는 상태임을 알립니다. 사용자가 “오늘 날씨 알려줘\u0026quot;라는 음성 명령을 하면, SDK는 사용자 음성 명령을 인식하고, 애플리케이션에 인식 상태를 실시간으로 전달합니다.  SDK는 명령어 인식을 완료하면 더 이상 사용자 음성을 입력받지 않고, 해당 음성 명령에 대한 응답을 출력합니다.    참고\n 응답 결과 출력 시 음성 답변과 함께 UI 템플릿 형식인 View Template이 사용될 수 있습니다. 자세한 내용은 음성인식 결과 화면 출력에서 확인하실 수 있습니다.  그림1. 인터랙션 시나리오\n"});index.add({'id':10,'href':'/publishing/directory_s/','title':"010101_디렉토리s 확인",'content':"디렉토리s 확인 #  "});index.add({'id':11,'href':'/kakao_i/sdk_for_wallpad_kor/android_studio_setting/','title':"Android Studio 설정",'content':"Android Studio 설정 #  프로젝트에서 SDK 사용 #  프로젝트에서 Kakao i SDK를 사용하기 위해서 다음 순서에 따라 Kakao i SDK를 빌드 의존성으로 추가한 후 불러오기를 진행합니다\nGradle 설정 #    Android Studio | New Project로 이동하여 ****신규 프로젝트를 생성합니다\n  build.gradle로 이동하여 minSdkVersion 레벨을 21, JavaVersion을 8로 설정 후, 애플리케이션의 패키지 이름을 applicationId로 지정합니다.\nandroid { defaultConfig { ... minSdkVersion 21 //Android SDK API 레벨을 21로 설정 applicationId \u0026quot;서버에 등록된 패키지명\u0026quot; } compileOptions { //Java 컴파일러 타겟을 Java8로 설정 sourceCompatibility JavaVersion.VERSION_1_8 targetCompatibility JavaVersion.VERSION_1_8 } kotlinOptions { //Jvm Target을 1.8로 지정 jvmTarget = \u0026quot;1.8\u0026quot; } } 참고\n SDK를 사용하기 위해서는 먼저 Kakao i 서버에 애플리케이션의 패키지명을 등록해야 합니다. 자세한 등록 방법은 Kakao i SDK 기획 PM에게 문의 부탁드립니다.    build.gradle (Project) 파일의 allprojects-repositories 섹션의 mavenCentral() 아래에 각 레포지토리 URL을 추가합니다.\nallprojects { repositories { google() jcenter() mavenCentral() maven { url \u0026#39;https://devrepo.kakao.com/nexus/content/groups/public/\u0026#39; } //출시 시  maven { url \u0026#39;http://maven.daumcorp.com/content/repositories/daum\u0026#39; } //테스트 시  maven { url \u0026#39;http://maven.daumcorp.com/content/repositories/daum-snapshots\u0026#39; } } 표. Maven Repository 경로\n주의\n Release(출시)와 Snapshots(테스트)의 Maven Repository 경로가 상이하므로, 반드시 의존성 구분과 개발 단계를 확인한 후에 해당 경로를 추가해야 합니다.    build.gradle (module: app) 파일에 SDK 의존성 항목을 추가합니다.\n표. Kakao i SDK 의존성\n  SDK 최신 버전을 컴파일하기 위해 build.gradle (module: app) 파일의 dependencies {} 섹션에 다음을 추가합니다.\n    Kakao i SDK의 의존성 항목은 향후 추가 및 변경될 수 있으므로, 최신 정보는 Kakao i PM에게 문의 부탁드립니다.\ndependencies { implementation \u0026#39;com.kakao.sdk:usermgmt:1.27.0\u0026#39; implementation \u0026#39;com.kakao.i:sdk-android:1.2.6.24\u0026#39; }   프로젝트를 빌드하면, Kakao i SDK를 애플리케이션에 가져올 수 있습니다.  Manifest 설정 #  사용자 권한을 획득하기 위해서 Android Manifest를 업데이트합니다.\n  Project/\u0026hellip;/AndroidManifest.xml 파일을 오픈합니다.\n  다음 Manifest 권한 획득 표를 참고하여, 필요한 퍼미션을 업데이트합니다.\n표. Mainfest 권한 획득\n  \u0026lt;uses-permission android:name=\u0026#34;android.permission.INTERNET\u0026#34; /\u0026gt; \u0026lt;uses-permission android:name=\u0026#34;android.permission.RECORD_AUDIO\u0026#34; /\u0026gt; \u0026lt;uses-permission android:name=\u0026#34;android.permission.READ_CONTACTS\u0026#34; /\u0026gt; \u0026lt;uses-permission android:name=\u0026#34;android.permission.CALL_PHONE\u0026#34;/\u0026gt; 참고\n Manifest에 퍼미션 허용에 대한 상세 내용은 Google Developers 사이트에서 확인하실 수 있습니다.  "});index.add({'id':12,'href':'/kakao_i_cloud/','title':"Kakao i Cloud",'content':"소개 #  Kakao i Cloud의 한글 표기는 카카오 i 클라우드 입니다. 표기에 주의해주십시오.\n"});index.add({'id':13,'href':'/kakao_work/1.0/web-api-ref/','title':"Web API 레퍼런스",'content':"Web API 레퍼런스 #  시작하기 #   카카오워크(Kakao Work)는 HTTP Remote Procedure Call(이하 RPC) 스타일의 API를 제공합니다. HTTP RPC 스타일은 리소스 중심의 REST API와는 달리, 종류별로 그룹 지어진 기능들을 URL로 표현하여 API를 구분합니다.\n카카오워크 Web API의 URL은 다음과 같은 형식을 따릅니다.\nhttps://cbt-kw-api.kkep.io/v1/*{API 종류}.{API 이름}*  API 종류: 각 API는 기능 영역별로 분류되어 제공됩니다. 예를 들어 사용자 정보를 다루는 API들은 Users 분류로 묶여 제공되고, 채팅방을 다루는 API는 Conversations, 메시지를 다루는 API는 Messages 분류로 묶여 제공됩니다. API 이름: 기능 영역별로 분류된 API 종류 중에서 각 행위를 수행하는 API명을 지칭합니다.  예를 들어, 워크 스페이스에 속한 멤버의 상세 정보를 조회하는 API는 다음과 같이 표현할 수 있습니다.\nhttps://cbt-kw-api.kkep.io/v1/users.info Web API 리스트 #   본 문서에서는 아래와 같은 Web API에 대한 자세한 설명을 제공합니다.\n표. Action 리스트\n공통 사항 #   API 공통 가이드는 카카오워크 Web API를 사용하여 Bot을 개발할 때 미리 알아야 하는 내용을 설명합니다.\nHTTPS Only #  모든 카카오워크 Web API는 오직 HTTPS 프로토콜을 통해서만 사용 가능합니다. 어떠한 예외도 허용되지 않습니다.\nAPI 사용 제한 #  원활한 카카오워크 서비스 제공을 위하여 과도한 API 사용은 예고없이 제한될 수 있습니다. 보다 구체적인 제한 사항은 추후 확정될 예정입니다. API 사용에서 지속적인 제한이 발생한다면 호출 빈도를 조절하여 사용 가능합니다.\nAPI 요청 #   카카오워크에서 제공하고 있는 API의 요청 URL 형태는 아래와 같습니다.\nHTTP RPC 스타일의 API 요청(Request)에서는 파라미터를 다음과 같은 방법으로 전달할 수 있습니다.\nAPI 호출 방식 #  표. API 호출 방식\nAPI 호출 방식은 일반적으로 application/json과 application/x-www-form-urlencoded 2가지 방식 모두 허용하지만, 카카오워크 Web API에서는 application/json 방식 사용을 선호하고 있습니다. 특히 복잡한 데이터를 전달받아야하는 일부 API들은 application/json으로 표현된 데이터만 허용됩니다.\n예시.application/x-www-form-urlencoded 방식의 HTTP 요청\nPOST /v1/conversations.open Content-type: application/x-www-form-urlencoded Authorization: Bearer {YOUR_ACCESS_TOKEN} user_id={OPPONENT_USER_ID} 예시. application/json 방식의 HTTP 요청\nPOST /v1/conversations.open Content-type: application/json Authorization: Bearer {YOUR_ACCESS_TOKEN} {\u0026#34;user_id\u0026#34;: {OPPONENT_USER_ID}} API 인증 #  카카오워크의 Web API는 Bot 등록 과정에서 전달받은 Access Token을 HTTP 요청(Request)의 Authorization 헤더를 통해 전달하여 어떤 Bot에서 받은 요청인지 인증 및 권한 검사를 수행합니다. Access Token 발급 방법에 대한 자세한 내용은 [Kakao Work] Bot 시작 가이드 문서의 Bot 생성 및 등록 챕터를 참고하시기 바랍니다.\n예시. Authorization Header 사용 CURL 요청\n$ curl -X POST https://cbt-kw-api.kkep.io/v1/conversation.open \\ -H \u0026#34;Authorization: Bearer {YOUR_ACCESS_TOKEN}\u0026#34; \\ -d \u0026#34;user_id={USER_ID}\u0026#34; API 응답 #   모든 카카오워크 API 응답(Response)은 아래 테이블과 같은 구조를 갖는 JSON 객체로 표현됩니다. 따라서 Content Type은 application/json으로 고정됩니다.\n공통 응답 포맷 #  모든 카카오워크 API 응답은 다음의 구조를 갖는 JSON 객체로 표현됩니다.\n표. 공통 응답 포맷\n[error](API%207b9ed98b6c7948698b9688cc77ca1c7d/Untitled%20b8071201694f45d9af25e88d96993262/error%20bdd829673eb646998fcaccc2d69482df.md)\n호출된 API의 성공 혹은 실패 여부는 success 필드의 값을 통해 확인할 수 있습니다. 만약 success 필드의 값이 “True”인 경우에는 호출된 API는 문제 없이 성공된 것이고, 반면에 success 필드의 값이 “False”인 경우에는 실패를 나타냅니다.\n예시. API 호출 성공 응답\n{ \u0026#34;success\u0026#34;: true, \u0026#34;user\u0026#34;: { /* ... user entity ... */ } } 공통 에러 정보 #   API 호출이 실패한 경우, error 필드를 통해 실패 이유에 대해 보다 상세한 정보를 얻을 수 있습니다.\ncode\n예시. API 호출 실패 응답\n{ \u0026#34;success\u0026#34;: false, \u0026#34;error\u0026#34;: { \u0026#34;code\u0026#34;: \u0026#34;missing_parameter\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;user_id parameter is missing.\u0026#34; } } 필드 타입 표기 #  API 응답은 기본적으로 JSON 타입을 따르며, 추가로 확장된 타입은 아래 표기를 따릅니다.\n표. 필드 타입 표기\nPagination #   Pagination이 적용된 목록 조회 API는 아래와 같은 규칙과 과정을 가집니다.\n기본 규칙 #  API 응답이 아래 두 조건 중 하나라도 충족할 경우 더 이상 조회할 내용이 없는 것으로 판단합니다.\n 목록이 빈 배열일 경우 cursor가 NULL일 경우  첫번째 호출 #  목록 조회 단위인 limit를 파라미터로 지정합니다. 없으면 API에 정의된 기본값이 사용됩니다.\n첫번째 호출 이후의 모든 호출 #  바로 이전 API 호출 응답의 cursor만 파라미터로 지정합니다. cursor 외 다른 파라미터를 같이 호출할 시 실패 응답이 반환됩니다.\n"});index.add({'id':14,'href':'/kakao_work/current/web-api-ref/','title':"Web API 레퍼런스",'content':"Web API 레퍼런스 #  시작하기 #   카카오워크(Kakao Work)는 HTTP Remote Procedure Call(이하 RPC) 스타일의 API를 제공합니다. HTTP RPC 스타일은 리소스 중심의 REST API와는 달리, 종류별로 그룹 지어진 기능들을 URL로 표현하여 API를 구분합니다.\n카카오워크 Web API의 URL은 다음과 같은 형식을 따릅니다.\nhttps://cbt-kw-api.kkep.io/v1/*{API 종류}.{API 이름}*  API 종류: 각 API는 기능 영역별로 분류되어 제공됩니다. 예를 들어 사용자 정보를 다루는 API들은 Users 분류로 묶여 제공되고, 채팅방을 다루는 API는 Conversations, 메시지를 다루는 API는 Messages 분류로 묶여 제공됩니다. API 이름: 기능 영역별로 분류된 API 종류 중에서 각 행위를 수행하는 API명을 지칭합니다.  예를 들어, 워크 스페이스에 속한 멤버의 상세 정보를 조회하는 API는 다음과 같이 표현할 수 있습니다.\nhttps://cbt-kw-api.kkep.io/v1/users.info Web API 리스트 #   본 문서에서는 아래와 같은 Web API에 대한 자세한 설명을 제공합니다.\n표. Action 리스트\n공통 사항 #   API 공통 가이드는 카카오워크 Web API를 사용하여 Bot을 개발할 때 미리 알아야 하는 내용을 설명합니다.\nHTTPS Only #  모든 카카오워크 Web API는 오직 HTTPS 프로토콜을 통해서만 사용 가능합니다. 어떠한 예외도 허용되지 않습니다.\nAPI 사용 제한 #  원활한 카카오워크 서비스 제공을 위하여 과도한 API 사용은 예고없이 제한될 수 있습니다. 보다 구체적인 제한 사항은 추후 확정될 예정입니다. API 사용에서 지속적인 제한이 발생한다면 호출 빈도를 조절하여 사용 가능합니다.\nAPI 요청 #   카카오워크에서 제공하고 있는 API의 요청 URL 형태는 아래와 같습니다.\nHTTP RPC 스타일의 API 요청(Request)에서는 파라미터를 다음과 같은 방법으로 전달할 수 있습니다.\nAPI 호출 방식 #  표. API 호출 방식\nAPI 호출 방식은 일반적으로 application/json과 application/x-www-form-urlencoded 2가지 방식 모두 허용하지만, 카카오워크 Web API에서는 application/json 방식 사용을 선호하고 있습니다. 특히 복잡한 데이터를 전달받아야하는 일부 API들은 application/json으로 표현된 데이터만 허용됩니다.\n예시.application/x-www-form-urlencoded 방식의 HTTP 요청\nPOST /v1/conversations.open Content-type: application/x-www-form-urlencoded Authorization: Bearer {YOUR_ACCESS_TOKEN} user_id={OPPONENT_USER_ID} 예시. application/json 방식의 HTTP 요청\nPOST /v1/conversations.open Content-type: application/json Authorization: Bearer {YOUR_ACCESS_TOKEN} {\u0026#34;user_id\u0026#34;: {OPPONENT_USER_ID}} API 인증 #  카카오워크의 Web API는 Bot 등록 과정에서 전달받은 Access Token을 HTTP 요청(Request)의 Authorization 헤더를 통해 전달하여 어떤 Bot에서 받은 요청인지 인증 및 권한 검사를 수행합니다. Access Token 발급 방법에 대한 자세한 내용은 [Kakao Work] Bot 시작 가이드 문서의 Bot 생성 및 등록 챕터를 참고하시기 바랍니다.\n예시. Authorization Header 사용 CURL 요청\n$ curl -X POST https://cbt-kw-api.kkep.io/v1/conversation.open \\ -H \u0026#34;Authorization: Bearer {YOUR_ACCESS_TOKEN}\u0026#34; \\ -d \u0026#34;user_id={USER_ID}\u0026#34; API 응답 #   모든 카카오워크 API 응답(Response)은 아래 테이블과 같은 구조를 갖는 JSON 객체로 표현됩니다. 따라서 Content Type은 application/json으로 고정됩니다.\n공통 응답 포맷 #  모든 카카오워크 API 응답은 다음의 구조를 갖는 JSON 객체로 표현됩니다.\n표. 공통 응답 포맷\n[error](API%207b9ed98b6c7948698b9688cc77ca1c7d/Untitled%20b8071201694f45d9af25e88d96993262/error%20bdd829673eb646998fcaccc2d69482df.md)\n호출된 API의 성공 혹은 실패 여부는 success 필드의 값을 통해 확인할 수 있습니다. 만약 success 필드의 값이 “True”인 경우에는 호출된 API는 문제 없이 성공된 것이고, 반면에 success 필드의 값이 “False”인 경우에는 실패를 나타냅니다.\n예시. API 호출 성공 응답\n{ \u0026#34;success\u0026#34;: true, \u0026#34;user\u0026#34;: { /* ... user entity ... */ } } 공통 에러 정보 #   API 호출이 실패한 경우, error 필드를 통해 실패 이유에 대해 보다 상세한 정보를 얻을 수 있습니다.\ncode\n예시. API 호출 실패 응답\n{ \u0026#34;success\u0026#34;: false, \u0026#34;error\u0026#34;: { \u0026#34;code\u0026#34;: \u0026#34;missing_parameter\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;user_id parameter is missing.\u0026#34; } } 필드 타입 표기 #  API 응답은 기본적으로 JSON 타입을 따르며, 추가로 확장된 타입은 아래 표기를 따릅니다.\n표. 필드 타입 표기\nPagination #   Pagination이 적용된 목록 조회 API는 아래와 같은 규칙과 과정을 가집니다.\n기본 규칙 #  API 응답이 아래 두 조건 중 하나라도 충족할 경우 더 이상 조회할 내용이 없는 것으로 판단합니다.\n 목록이 빈 배열일 경우 cursor가 NULL일 경우  첫번째 호출 #  목록 조회 단위인 limit를 파라미터로 지정합니다. 없으면 API에 정의된 기본값이 사용됩니다.\n첫번째 호출 이후의 모든 호출 #  바로 이전 API 호출 응답의 cursor만 파라미터로 지정합니다. cursor 외 다른 파라미터를 같이 호출할 시 실패 응답이 반환됩니다.\n"});index.add({'id':15,'href':'/kakao_work/','title':"Kakao Work",'content':"소개 #  Kakao Work의 한글 표기는 카카오 워크 입니다. 표기에 주의해주십시오.\nKakao Work 하위 문서의 수가 많지 않아 상품별 첫 화면에 바로 문서 목록 표시함 Kakao i Engine 하위 문서의 수가 많아 상품별 첫 화면에 분류 표시함 수동으로 만든 목록 (_index.md 파일에 입력) #  Block Kit 구성 및 정책\nWeb API 레퍼런스\nBot 시작 가이드\n자동으로 만든 목록 ( content/kakao_work 디렉토리의 내용으로 생성) #  "});index.add({'id':16,'href':'/kakao_i/sdk_for_wallpad_kor/stt_dev_process/','title':"음성 인식 개발 프로세스",'content':"음성 인식 개발 프로세스 #  개발 프로세스 #  Android Studio 설정을 완료 후, 아래 순서에 따라 Kakao i SDK 연동 개발을 진행합니다. (수정1)\n사전 작업 #  음성 인식 개발 프로세스를 정상적으로 수행하기 위해서는 다음의 사전 작업이 필요합니다.\n Kakao SDK 연동 프로젝트에 Kakao SDK가 연동되어있지 않은 경우, Kakao Developers 사이트의 Kakao SDK v2 사용법에 따라 연동 작업을 진행합니다. Kakao Developers에 애플리케이션 등록 Kakao Developers에 애플리케이션을 생성하는 방법은 Kakao i PM에게 문의 부탁드립니다.  Kakao i SDK 초기화 #  Kakao i SDK를 초기화하기 위해서 하기 순서에 따라 Application.onCreate() 메서드에서 KakaoI 클래스에 내장된 메서드들을 체이닝 방식으로 확장합니다.\n  사전에 협의된 Phase 정보를 KakaoI.with()항목에 입력합니다.\n  사용 가능 Phase는 sandbox, stage, real이며, Phase 정보를 확인해야 할 경우 Kakao i PM에 문의 부탁드립니다.\nKakaoI.with(applicationContext, \u0026#34;{사용 가능 Phase}\u0026#34;)     Kakao 계정 인증 정보를 Kakao i SDK로 전달을 위해 provideKakaoIAuth()을 확장합니다.\n 모듈 확장 시, Kakao SDK에서 전달받은 인증 정보로 Access Token, Refresh Token, AppUser ID 정보를 제공하는 인터페이스가 구현되어야 합니다. 이 정보는 로그인 시점, 유저 확인 시점 등에서 Lazy 프로퍼티를 호출하며, 호출 시점에 값이 제공되지 않으면 오류가 발생합니다.  **참고 *** AppUserId의 경우 모바일앱의 appUserId로서, Kakao SDK에서 제공하는 Access Token Info에서 확인 가능합니다. 자세한 설명은 Kakao Developers \u0026gt; 토큰관리를 참고 부탁드립니다.\n Kakao SDK 초기화 및 개발 환경 설정은 Kakao Developers의 구현 방식을 기반으로 합니다.    Kakao i 서버로 패키지 정보 전달을 위해 providePackageInfo()을 확장합니다.\n 확장 시에는 Package Name, Version Name, Version Code 정보를 포함하고 있는packageInfo를 구현해야 합니다. Version Name과 Version Code 값을 별도로 지정하지 않을 경우에는 Default 값으로 전달됩니다.  참고\n Kakao i SDK를 사용하기 위해서는 Package Name을 Kakao i 서버에 미리 등록해야 합니다. 자세한 등록 방법은 Kakao i SDK PM에게 문의 부탁드립니다.    만약 Kakao i SDK에 기본 탑재된 View Template이 아닌 다른 View Template을 구현해서 사용할 경우, provideTemplateHandler()을 확장합니다.\n 의존성 추가 작업 시, com.kakao.i:sdk-android-agent항목 추가가 필요합니다.    예제 코드 #  다음은 provideKakaoIAuth(), providePackageInfo(), provideTemplateHandler() 메서드를 사용하여 Kakao i SDK를 초기화한 예시입니다.\noverride fun onCreate() { KakaoI.with(applicationContext, \u0026#34;sandbox\u0026#34;) .module(object : Module() { override fun provideKakaoIAuth(): KakaoIAuth { return object : KakaoIAuth { override fun getAccessToken(): String? = Session.getCurrentSession().tokenInfo.accessToken override fun getRefreshToken(): String? = Session.getCurrentSession().tokenInfo.refreshToken override fun getAppUserId(): Long = getSharedPreferences(\u0026#34;name\u0026#34;, Context.MODE_PRIVATE) .getLong(Constants.APP_USER_ID, 0L) } } override fun providePackageInfo(context: Context): PackageInfo { val packageInfo = super.providePackageInfo(context) packageInfo.packageName = getString(R.string.package_info) return packageInfo } override fun provideTemplateHandler(context: Context): TemplateManager = TemplateManager(context, TemplateRenderer()) }) .init() } 표. Kakao i SDK 모듈\n헤이카카오 가입 #  https://www.notion.so/f16eb5dcc57f48979a8b620e1ef4aac0#87082a4afb4c496cbd454ce481d61c0b\nKakao i 음성 인식 서비스를 이용하기 위해서 사용자는 헤이카카오 서비스에 가입해야 합니다. Kakao i SDK에는 자체적으로 헤이카카오 서비스 가입 프로세스가 구현되어 있습니다.\n 헤이카카오 서비스는 Kakao 계정으로 가입할 수 있습니다.    KakaoI.checkAccount()를 호출합니다.\nKakaoI.checkAccount()   헤이카카오 계정을 확인 후, checkAccount() 콜백(Callback) 메서드로 현재 Kakao 계정 상태를 전달합니다.\n 각 메서드에 대한 설명을 참고하여, 필요 시 후속 진행 작업을 수행합니다.    표. checkAccount 콜백\n예제 코드 #  다음은 checkAccount() 콜백 메서드를 사용한 예제입니다.\n//유저 상태를 확인하여 다음으로 수행해야할 Intent를 알려주거나 오류 상태를 전달 하는 Callback Interface KakaoI.checkAccount(object : KakaoI.OnCheckCallback { override fun onSuccess() { /** * 사용자 상태 및 토큰 정보가 정상 으로 사용 가능한 상태 */ } override fun onAuthorizeFailed() { /** * AccessToken이 만료된 경우로, 인증 토큰 갱신 후 재시도 필요 */ } override fun onSignUpRequired(intentSupplier: KakaoI.IntentSupplier) { /** * 사용자가 Kakao i를 사용하고 있지 않은 상태로, Kakao i 가입이 요구되며, * 가입 Intent 가 전달되며 startActivity 로 Intent를 수행할 수 있음 */ } override fun onAgreementRequired(intentSupplier: KakaoI.IntentSupplier) { /** * 사용자가 추가로 동의해야할 약관이 존재할 경우 호출되며, * 약관동의 Intent 가 전달되며 startActivity 로 Intent를 수행할 수 있음 */ } override fun onError(p0: Exception?) { /** * 정의되지 않은 오류가 발생함 */ } }) Permission 확인 #  다음의 권한(Runtime Permission)을 Manifest에 추가하여, 사용자가 런타임에 각 권한을 승인하도록 요청합니다. 자세한 설명은 Google Developers 사이트의 Android 개발자 \u0026gt; 앱 권한 요청에서 확인할 수 있습니다.\n표. Runtime Permission\n음성 인식 활성화 #  Kakao i 음성 인식을 활성화하기 위해 False(Default)로 설정되어 있는 초기값을 KakaoI.setEnabled() 메드를 사용하여 True 값으로 변경합니다.\nKakaoI.setEnabled(true) 참고\n Wake-up word(호출명령어)의 초기 값은 “헤이카카오”로 고정되지만, 최종 사용자는 설정 화면에서 다른 Wake-up word를 설정할 수 있습니다. Wake-up word가 유입될 때, 발화 효과음을 재생하는 과정은 Kakao i SDK 내부적으로 수행됩니다.  클래스 구현 #  음성 인식 결과 값을 애플리케이션으로 가져오기 위해서는 각 음성 인식 단계에서 클래스를 구현 및 정의해야 합니다. 각 클래스에 대한 상세 API는 본 가이드의 API 레퍼런스 ****챕터에서 확인하실 수 있습니다.\n표. 음성 요청 클래스 구현\n참고\n 음성 요청 클래스에 대한 상세 API는 본 가이드의 API 레퍼런스 챕터에서 확인하실 수 있습니다.   초기화  애플리케이션에서 KakaoI.startListen() 메서드를 호출하고, KakaoIListeningBinder를 반환받습니다. KakaoI.startListen()의 파라미터로 KakaoIListeningBinder.EventListener 콜백이 등록되면, 음성 인식 상태를 전달 받을 수 있습니다.   음성 인식  애플리케이션에서 requestRecognition() 메서드를 호출하여 음성 인식을 시작합니다. 음성 인식 상태에 따라 등록된 EventListner 콜백 함수가 호출됩니다.   음성 인식 종료  stopRecognition() 메서드를 호출하여 음성 인식을 중간에 종료할 수 있습니다.    예제 코드 #  음성 인식 클래스 구현 시 필요한 샘플 코드는 다음과 같습니다.\nclass RecognizeActivity : Activity { private var listeningBinder: KakaoIListeningBinder? = null fun start() { listeningBinder = KakaoI.startListen(this@MainActivity, eventListener) listeningBinder!!.addListener(stateListener) } fun stop() { listeningBinder?.stopListen() listeningBinder = null } // Wake-up-word 없이 바로 Wake-up  fun requestRecognition() { listeningBinder?.requestRecognition() } // 음성 인식 종료 (이미 녹음된 데이터가 존재할 경우, 해당 데이터로 음성 인식이 될 수도있음)  fun stopRecognition() { listeningBinder?.stopRecognition() } // 음성이 입력중일 경우 음성 인식은 취소되며, 현재 진행중인 음성 인식 컨텍스트가 있다면 음성 인식은 종료됩니다.  fun cancelDialog() { listeningBinder?.cancelDialog() } // KVS 연결 상황에서 발생할 수 잇는 오류들을 처리하는 callback  private val eventListener = object : KakaoIListeningBinder.EventListener { override fun onMicUnavailable() { // Microphone 사용 불가 에러 상황  } override fun onError(e: Exception?) { // 에러 상황  } override fun onAgreementRequired(followingIntentFunc: KakaoI.IntentSupplier) { // 추가 약관 동의가 필요한 상황  this@MainActivity.onAgreementRequired(followingIntentFunc.supply(this@MainActivity)) } override fun onStartListen() { // 웨이크업 대기 상태 진입  } override fun onStopListen() { // 웨이크업이 안되는 상태 진입, Microphone 사용하지 않음  } override fun onWithdrawal() { // 서비스 탈퇴됨  } override fun onAuthorizeFailed() { // 인증 실패  } } // 음성 인식 상태를 모니터링 하는 callback  private stateListener = object : KakaoI.StateListener { override fun onStateChanged(state: Int) { // int STATE_DEACTIVATED = 1;  // int STATE_IDLE = 2;  // int STATE_RECOGNIZING = 3;  // int STATE_PROCESSING = 4;  } override fun onPartialResult(result: String?) { // 부분 인식 결과  } override fun onResult(result: String?) { // 최종 인식 결과  } } } 음성 인식 결과 화면 출력 #  Kakao i SDK에서는 음성 인식 결과를 UI 화면으로 출력할 때, View Template이라는 레이아웃 화면을 사용합니다. Kakao i SDK는 기본적인 View Template을 제공하지만, 클라이언트의 특정 서비스에 맞춰서 View Template 수정도 가능합니다. 수정된 View Template 사용 시, Kakao i SDK 초기화를 수행할 때 [provideTemplateHandler()](https://www.notion.so/9a14363c2a8b47099ba3e7c2b42afc4a?v=5d571b9986ea4f60b5e6845e2710b45d) 메드를 호출해야합니다.\n참고\n View Template 수정 시에도 음성 답변은 Kakao i SDK를 통해 재생됩니다. View Template 구현에 관한 자세한 내용은 [Kakao i Engine] View Template 가이드를 참고하시기 바랍니다.  설정 화면 출력 #  KakaoI.startSettingActivity(getContext() 메서드를 호출하여 Kakao i 설정 화면을 최종 사용자에게 출력합니다.\n* KakaoI.startSettingActivity(getContext(), error -\u0026gt; /* Do something on error */) "});index.add({'id':17,'href':'/kakao_i_connect/','title':"Kakao i Connect",'content':"소개 #  Kakao i Connect의 한글 표기는 카카오 i 커넥트 입니다. 표기에 주의해주십시오.\n"});index.add({'id':18,'href':'/kakao_i_insight/','title':"Kakao i Insight",'content':"소개 #  Kakao i Insight의 한글 표기는 카카오 i 인사이트 입니다. 표기에 주의해주십시오.\n"});index.add({'id':19,'href':'/publishing/','title':"기타(sandbox)",'content':"소개 #  연습을 위한 공간입니다. 이 디렉토리의 문서는 언제든 삭제될 수 있습니다.\n"});index.add({'id':20,'href':'/kakao_i/apiref/sub2/','title':"Sub2",'content':""});index.add({'id':21,'href':'/kakao_i/apiref/sub3/','title':"Sub3",'content':""});index.add({'id':22,'href':'/kakao_i/sdk/android/','title':"Android",'content':""});index.add({'id':23,'href':'/kakao_i/sdk/ios/','title':"Ios",'content':""});index.add({'id':24,'href':'/kakao_i/sdk/web/','title':"Web",'content':""});index.add({'id':25,'href':'/kakao_i/sdk_for_wallpad_kor_v1.0.0/','title':"Sdk for Wallpad Kor V1.0.0",'content':"SDK for Wallpad_KOR_v.1.0 #  빨리 시작하기 #  이 문서는 Wallpad 디바이스에서 Kakao i 음성 인식 서비스를 사용하기 위하여 Kakao i SDK for Wallpad를 이용한 개발 가이드로서, 고객사의 개발자를 대상으로 작성되었습니다.\nKakao i SDK for Wallpad는 기본적으로 사용자의 음성 명령을 입력받고, 명령어를 분석하여 사용자 요청에 맞는 응답(음성 또는 UI)을 출력하는 기능을 제공합니다.\n참고\n 이 문서는 Kakao i Android SDK Version 1.2.4.18를 기반으로 작성되었으며, Android API 21을 필요로 합니다.  Kakao i SDK 구성 요소 #  Kakao i SDK for Wallpad의 구성 요소는 다음과 같습니다.\n표1. Kakao i SDK for Wallpad의 구성요소\n   구성요소 설명     Kakao i Agent 음성 인식 및 인식 상태 전달 등 음성 인식의 주요 기능을 포함하는 모듈입니다.   Kakao i Client Kakao i 서버와 SDK의 연동을 위해, 음성 인식 데이터와 음성 인식 상태 정보를 Kakao i 서버와 송신 및 수신할 때 사용되는 연동 관련 모듈입니다.   AppClient Application의 통신 관련 설정을 할 수 있는 모듈입니다.   Auditorium 사용자의 음성 명령을 녹음하고, 녹음된 결과(오디오 버퍼)를 필요한 곳에 공급하는 음성 입력 관련 모듈입니다.   Dialoid(Wake-up) Wake-Up 명령어를 설정하고, 인식된 발화 음성 상태 및 정보를 확인할 수 있는 음성 발화 모듈입니다.   Kapi Adapter Kakao i 음성 인식 서비스 인증 관련 모듈입니다.   PhoneCall Manager 전화 걸기 관련 모듈입니다. Wallpad에서 기능 구현 시, Kakao i PM에 문의 부탁드립니다.    주의\n Kakao i 음성 인식 서비스는 Kakao 서비스와 구분되는 별도의 서비스입니다. Kakao i 음성 인식 서비스를 이용하기 위해서는 헤이카카오 서비스에 가입이 필요하며, 헤이카카오 서비스는 카카오 계정을 통해 가입할 수 있습니다.  인터랙션 시나리오 #  다음은 사용자가 “오늘 날씨 알려줘\u0026quot;라는 음성 명령을 발화했을 때, 사용자, 벤더 애플리케이션, SDK 간의 인터랙션을 정리한 시나리오입니다.\n Wallpad 디바이스에서 Kakao i SDK for Wallpad를 사용하기 위해 SDK 초기화를 수행합니다. 사용자가 Wake-up word(호출명령어)인 “헤이 카카오!”를 발화하면, SDK는 발화 명령어를 인식하고 발화 효과음을 재생하여 사용자에게 명령어를 입력 받을 수 있는 상태임을 알립니다. 사용자가 “오늘 날씨 알려줘\u0026quot;라는 음성 명령을 하면, SDK는 사용자 음성 명령을 인식하고, 애플리케이션에 인식 상태를 실시간으로 전달합니다.  SDK는 명령어 인식을 완료하면 더 이상 사용자 음성을 입력받지 않고, 해당 음성 명령에 대한 응답을 출력합니다.    참고\n 응답 결과 출력 시 음성 답변과 함께 UI 템플릿 형식인 View Template이 사용될 수 있습니다. 자세한 내용은 음성인식 결과 화면 출력에서 확인하실 수 있습니다.  그림1. 인터랙션 시나리오\nAndroid Studio 설정 #  프로젝트에서 SDK 사용 #  프로젝트에서 Kakao i SDK를 사용하기 위해서 다음 순서에 따라 Kakao i SDK를 빌드 의존성으로 추가한 후 불러오기를 진행합니다\nGradle 설정 #    Android Studio | New Project로 이동하여 ****신규 프로젝트를 생성합니다\n  build.gradle로 이동하여 minSdkVersion 레벨을 21, JavaVersion을 8로 설정 후, 애플리케이션의 패키지 이름을 applicationId로 지정합니다.\nandroid { defaultConfig { ... minSdkVersion 21 //Android SDK API 레벨을 21로 설정 applicationId \u0026quot;서버에 등록된 패키지명\u0026quot; } compileOptions { //Java 컴파일러 타겟을 Java8로 설정 sourceCompatibility JavaVersion.VERSION_1_8 targetCompatibility JavaVersion.VERSION_1_8 } kotlinOptions { //Jvm Target을 1.8로 지정 jvmTarget = \u0026quot;1.8\u0026quot; } } 참고\n SDK를 사용하기 위해서는 먼저 Kakao i 서버에 애플리케이션의 패키지명을 등록해야 합니다. 자세한 등록 방법은 Kakao i SDK 기획 PM에게 문의 부탁드립니다.    build.gradle (Project) 파일의 allprojects-repositories 섹션의 mavenCentral() 아래에 각 레포지토리 URL을 추가합니다.\nallprojects { repositories { google() jcenter() mavenCentral() maven { url \u0026#39;https://devrepo.kakao.com/nexus/content/groups/public/\u0026#39; } //출시 시  maven { url \u0026#39;http://maven.daumcorp.com/content/repositories/daum\u0026#39; } //테스트 시  maven { url \u0026#39;http://maven.daumcorp.com/content/repositories/daum-snapshots\u0026#39; } } 표. Maven Repository 경로\n주의\n Release(출시)와 Snapshots(테스트)의 Maven Repository 경로가 상이하므로, 반드시 의존성 구분과 개발 단계를 확인한 후에 해당 경로를 추가해야 합니다.    build.gradle (module: app) 파일에 SDK 의존성 항목을 추가합니다.\n표. Kakao i SDK 의존성\n  SDK 최신 버전을 컴파일하기 위해 build.gradle (module: app) 파일의 dependencies {} 섹션에 다음을 추가합니다.\n    Kakao i SDK의 의존성 항목은 향후 추가 및 변경될 수 있으므로, 최신 정보는 Kakao i PM에게 문의 부탁드립니다.\ndependencies { implementation \u0026#39;com.kakao.sdk:usermgmt:1.27.0\u0026#39; implementation \u0026#39;com.kakao.i:sdk-android:1.2.6.24\u0026#39; }   프로젝트를 빌드하면, Kakao i SDK를 애플리케이션에 가져올 수 있습니다.  Manifest 설정 #  사용자 권한을 획득하기 위해서 Android Manifest를 업데이트합니다.\n  Project/\u0026hellip;/AndroidManifest.xml 파일을 오픈합니다.\n  다음 Manifest 권한 획득 표를 참고하여, 필요한 퍼미션을 업데이트합니다.\n표. Mainfest 권한 획득\n  \u0026lt;uses-permission android:name=\u0026#34;android.permission.INTERNET\u0026#34; /\u0026gt; \u0026lt;uses-permission android:name=\u0026#34;android.permission.RECORD_AUDIO\u0026#34; /\u0026gt; \u0026lt;uses-permission android:name=\u0026#34;android.permission.READ_CONTACTS\u0026#34; /\u0026gt; \u0026lt;uses-permission android:name=\u0026#34;android.permission.CALL_PHONE\u0026#34;/\u0026gt; 참고\n Manifest에 퍼미션 허용에 대한 상세 내용은 Google Developers 사이트에서 확인하실 수 있습니다.  음성 인식 개발 프로세스 #  개발 프로세스 #  Android Studio 설정을 완료 후, 아래 순서에 따라 Kakao i SDK 연동 개발을 진행합니다.\n사전 작업 #  음성 인식 개발 프로세스를 정상적으로 수행하기 위해서는 다음의 사전 작업이 필요합니다.\n Kakao SDK 연동 프로젝트에 Kakao SDK가 연동되어있지 않은 경우, Kakao Developers 사이트의 Kakao SDK v2 사용법에 따라 연동 작업을 진행합니다. Kakao Developers에 애플리케이션 등록 Kakao Developers에 애플리케이션을 생성하는 방법은 Kakao i PM에게 문의 부탁드립니다.  Kakao i SDK 초기화 #  Kakao i SDK를 초기화하기 위해서 하기 순서에 따라 Application.onCreate() 메서드에서 KakaoI 클래스에 내장된 메서드들을 체이닝 방식으로 확장합니다.\n  사전에 협의된 Phase 정보를 KakaoI.with()항목에 입력합니다.\n  사용 가능 Phase는 sandbox, stage, real이며, Phase 정보를 확인해야 할 경우 Kakao i PM에 문의 부탁드립니다.\nKakaoI.with(applicationContext, \u0026#34;{사용 가능 Phase}\u0026#34;)     Kakao 계정 인증 정보를 Kakao i SDK로 전달을 위해 provideKakaoIAuth()을 확장합니다.\n 모듈 확장 시, Kakao SDK에서 전달받은 인증 정보로 Access Token, Refresh Token, AppUser ID 정보를 제공하는 인터페이스가 구현되어야 합니다. 이 정보는 로그인 시점, 유저 확인 시점 등에서 Lazy 프로퍼티를 호출하며, 호출 시점에 값이 제공되지 않으면 오류가 발생합니다.  **참고 *** AppUserId의 경우 모바일앱의 appUserId로서, Kakao SDK에서 제공하는 Access Token Info에서 확인 가능합니다. 자세한 설명은 Kakao Developers \u0026gt; 토큰관리를 참고 부탁드립니다.\n Kakao SDK 초기화 및 개발 환경 설정은 Kakao Developers의 구현 방식을 기반으로 합니다.    Kakao i 서버로 패키지 정보 전달을 위해 providePackageInfo()을 확장합니다.\n 확장 시에는 Package Name, Version Name, Version Code 정보를 포함하고 있는packageInfo를 구현해야 합니다. Version Name과 Version Code 값을 별도로 지정하지 않을 경우에는 Default 값으로 전달됩니다.  참고\n Kakao i SDK를 사용하기 위해서는 Package Name을 Kakao i 서버에 미리 등록해야 합니다. 자세한 등록 방법은 Kakao i SDK PM에게 문의 부탁드립니다.    만약 Kakao i SDK에 기본 탑재된 View Template이 아닌 다른 View Template을 구현해서 사용할 경우, provideTemplateHandler()을 확장합니다.\n 의존성 추가 작업 시, com.kakao.i:sdk-android-agent항목 추가가 필요합니다.    예제 코드 #  다음은 provideKakaoIAuth(), providePackageInfo(), provideTemplateHandler() 메서드를 사용하여 Kakao i SDK를 초기화한 예시입니다.\noverride fun onCreate() { KakaoI.with(applicationContext, \u0026#34;sandbox\u0026#34;) .module(object : Module() { override fun provideKakaoIAuth(): KakaoIAuth { return object : KakaoIAuth { override fun getAccessToken(): String? = Session.getCurrentSession().tokenInfo.accessToken override fun getRefreshToken(): String? = Session.getCurrentSession().tokenInfo.refreshToken override fun getAppUserId(): Long = getSharedPreferences(\u0026#34;name\u0026#34;, Context.MODE_PRIVATE) .getLong(Constants.APP_USER_ID, 0L) } } override fun providePackageInfo(context: Context): PackageInfo { val packageInfo = super.providePackageInfo(context) packageInfo.packageName = getString(R.string.package_info) return packageInfo } override fun provideTemplateHandler(context: Context): TemplateManager = TemplateManager(context, TemplateRenderer()) }) .init() } 표. Kakao i SDK 모듈\n헤이카카오 가입 #  https://www.notion.so/f16eb5dcc57f48979a8b620e1ef4aac0#87082a4afb4c496cbd454ce481d61c0b\nKakao i 음성 인식 서비스를 이용하기 위해서 사용자는 헤이카카오 서비스에 가입해야 합니다. Kakao i SDK에는 자체적으로 헤이카카오 서비스 가입 프로세스가 구현되어 있습니다.\n 헤이카카오 서비스는 Kakao 계정으로 가입할 수 있습니다.    KakaoI.checkAccount()를 호출합니다.\nKakaoI.checkAccount()   헤이카카오 계정을 확인 후, checkAccount() 콜백(Callback) 메서드로 현재 Kakao 계정 상태를 전달합니다.\n 각 메서드에 대한 설명을 참고하여, 필요 시 후속 진행 작업을 수행합니다.    표. checkAccount 콜백\n예제 코드 #  다음은 checkAccount() 콜백 메서드를 사용한 예제입니다.\n//유저 상태를 확인하여 다음으로 수행해야할 Intent를 알려주거나 오류 상태를 전달 하는 Callback Interface KakaoI.checkAccount(object : KakaoI.OnCheckCallback { override fun onSuccess() { /** * 사용자 상태 및 토큰 정보가 정상 으로 사용 가능한 상태 */ } override fun onAuthorizeFailed() { /** * AccessToken이 만료된 경우로, 인증 토큰 갱신 후 재시도 필요 */ } override fun onSignUpRequired(intentSupplier: KakaoI.IntentSupplier) { /** * 사용자가 Kakao i를 사용하고 있지 않은 상태로, Kakao i 가입이 요구되며, * 가입 Intent 가 전달되며 startActivity 로 Intent를 수행할 수 있음 */ } override fun onAgreementRequired(intentSupplier: KakaoI.IntentSupplier) { /** * 사용자가 추가로 동의해야할 약관이 존재할 경우 호출되며, * 약관동의 Intent 가 전달되며 startActivity 로 Intent를 수행할 수 있음 */ } override fun onError(p0: Exception?) { /** * 정의되지 않은 오류가 발생함 */ } }) Permission 확인 #  다음의 권한(Runtime Permission)을 Manifest에 추가하여, 사용자가 런타임에 각 권한을 승인하도록 요청합니다. 자세한 설명은 Google Developers 사이트의 Android 개발자 \u0026gt; 앱 권한 요청에서 확인할 수 있습니다.\n표. Runtime Permission\n음성 인식 활성화 #  Kakao i 음성 인식을 활성화하기 위해 False(Default)로 설정되어 있는 초기값을 KakaoI.setEnabled() 메드를 사용하여 True 값으로 변경합니다.\nKakaoI.setEnabled(true) 참고\n Wake-up word(호출명령어)의 초기 값은 “헤이카카오”로 고정되지만, 최종 사용자는 설정 화면에서 다른 Wake-up word를 설정할 수 있습니다. Wake-up word가 유입될 때, 발화 효과음을 재생하는 과정은 Kakao i SDK 내부적으로 수행됩니다.  클래스 구현 #  음성 인식 결과 값을 애플리케이션으로 가져오기 위해서는 각 음성 인식 단계에서 클래스를 구현 및 정의해야 합니다. 각 클래스에 대한 상세 API는 본 가이드의 API 레퍼런스 ****챕터에서 확인하실 수 있습니다.\n표. 음성 요청 클래스 구현\n참고\n 음성 요청 클래스에 대한 상세 API는 본 가이드의 API 레퍼런스 챕터에서 확인하실 수 있습니다.   초기화  애플리케이션에서 KakaoI.startListen() 메서드를 호출하고, KakaoIListeningBinder를 반환받습니다. KakaoI.startListen()의 파라미터로 KakaoIListeningBinder.EventListener 콜백이 등록되면, 음성 인식 상태를 전달 받을 수 있습니다.   음성 인식  애플리케이션에서 requestRecognition() 메서드를 호출하여 음성 인식을 시작합니다. 음성 인식 상태에 따라 등록된 EventListner 콜백 함수가 호출됩니다.   음성 인식 종료  stopRecognition() 메서드를 호출하여 음성 인식을 중간에 종료할 수 있습니다.    예제 코드 #  음성 인식 클래스 구현 시 필요한 샘플 코드는 다음과 같습니다.\nclass RecognizeActivity : Activity { private var listeningBinder: KakaoIListeningBinder? = null fun start() { listeningBinder = KakaoI.startListen(this@MainActivity, eventListener) listeningBinder!!.addListener(stateListener) } fun stop() { listeningBinder?.stopListen() listeningBinder = null } // Wake-up-word 없이 바로 Wake-up  fun requestRecognition() { listeningBinder?.requestRecognition() } // 음성 인식 종료 (이미 녹음된 데이터가 존재할 경우, 해당 데이터로 음성 인식이 될 수도있음)  fun stopRecognition() { listeningBinder?.stopRecognition() } // 음성이 입력중일 경우 음성 인식은 취소되며, 현재 진행중인 음성 인식 컨텍스트가 있다면 음성 인식은 종료됩니다.  fun cancelDialog() { listeningBinder?.cancelDialog() } // KVS 연결 상황에서 발생할 수 잇는 오류들을 처리하는 callback  private val eventListener = object : KakaoIListeningBinder.EventListener { override fun onMicUnavailable() { // Microphone 사용 불가 에러 상황  } override fun onError(e: Exception?) { // 에러 상황  } override fun onAgreementRequired(followingIntentFunc: KakaoI.IntentSupplier) { // 추가 약관 동의가 필요한 상황  this@MainActivity.onAgreementRequired(followingIntentFunc.supply(this@MainActivity)) } override fun onStartListen() { // 웨이크업 대기 상태 진입  } override fun onStopListen() { // 웨이크업이 안되는 상태 진입, Microphone 사용하지 않음  } override fun onWithdrawal() { // 서비스 탈퇴됨  } override fun onAuthorizeFailed() { // 인증 실패  } } // 음성 인식 상태를 모니터링 하는 callback  private stateListener = object : KakaoI.StateListener { override fun onStateChanged(state: Int) { // int STATE_DEACTIVATED = 1;  // int STATE_IDLE = 2;  // int STATE_RECOGNIZING = 3;  // int STATE_PROCESSING = 4;  } override fun onPartialResult(result: String?) { // 부분 인식 결과  } override fun onResult(result: String?) { // 최종 인식 결과  } } } 음성 인식 결과 화면 출력 #  Kakao i SDK에서는 음성 인식 결과를 UI 화면으로 출력할 때, View Template이라는 레이아웃 화면을 사용합니다. Kakao i SDK는 기본적인 View Template을 제공하지만, 클라이언트의 특정 서비스에 맞춰서 View Template 수정도 가능합니다. 수정된 View Template 사용 시, Kakao i SDK 초기화를 수행할 때 [provideTemplateHandler()](https://www.notion.so/9a14363c2a8b47099ba3e7c2b42afc4a?v=5d571b9986ea4f60b5e6845e2710b45d) 메드를 호출해야합니다.\n참고\n View Template 수정 시에도 음성 답변은 Kakao i SDK를 통해 재생됩니다. View Template 구현에 관한 자세한 내용은 [Kakao i Engine] View Template 가이드를 참고하시기 바랍니다.  설정 화면 출력 #  KakaoI.startSettingActivity(getContext() 메서드를 호출하여 Kakao i 설정 화면을 최종 사용자에게 출력합니다.\n* KakaoI.startSettingActivity(getContext(), error -\u0026gt; /* Do something on error */) "});index.add({'id':26,'href':'/kakao_i/sdk_for_wallpad_kor/','title':"SDK for Wallpad",'content':"{{ .Content }}\n"});index.add({'id':27,'href':'/kakao_i_connect/p1/','title':"상품별 첫 화면",'content':"상품별 첫 화면 id=id1 #  pmain 레이아웃\n상품별 첫 화면 id=id2 #  pmain 레이아웃\n상품별 첫 화면 id=id3 #  pmain 레이아웃\n상품별 첫 화면 id=id3 #  pmain 레이아웃\nheading #  "});index.add({'id':28,'href':'/publishing/kitchensink/','title':"키친싱크",'content':"View raw (TEST.md)\nThis is a paragraph.\nThis is a paragraph.  Header 1 #  Header 2 #  Header 1 ======== Header 2 --------  Header 1 #  Header 2 #  Header 3 #  Header 4 #  Header 5 #  Header 6 #  # Header 1 ## Header 2 ### Header 3 #### Header 4 ##### Header 5 ###### Header 6  Header 1 #  Header 2 #  Header 3 #  Header 4 #  Header 5 #  Header 6 #  # Header 1 # ## Header 2 ## ### Header 3 ### #### Header 4 #### ##### Header 5 ##### ###### Header 6 ######   Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\n \u0026gt; Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.   This is a header. #   This is the first list item. This is the second list item.  Here\u0026rsquo;s some example code:\nMarkdown.generate();   \u0026gt; ## This is a header. \u0026gt; 1. This is the first list item. \u0026gt; 2. This is the second list item. \u0026gt; \u0026gt; Here's some example code: \u0026gt; \u0026gt; Markdown.generate();   Red Green Blue   Red Green Blue   Red Green Blue  - Red - Green - Blue + Red + Green + Blue * Red * Green * Blue  Buy flour and salt Mix together with water Bake  1. Buy flour and salt 1. Mix together with water 1. Bake Paragraph:\nCode  Paragraph: Code       * * * *** ***** - - - ---------------------------------------  This is an example link.\nThis link has no title attr.\nThis is [an example] id reference-style link.\nThis is [an example](http://example.com \u0026quot;Example\u0026quot;) link. [This link](http://example.com) has no title attr. This is [an example] [id] reference-style link. [id]: http://example.com \u0026quot;Optional Title\u0026quot;  single asterisks\nsingle underscores\ndouble asterisks\ndouble underscores\n*single asterisks* _single underscores_ **double asterisks** __double underscores__  This paragraph has some code in it.\nThis paragraph has some `code` in it.  ![Alt Text](https://get.svg.workers.dev/?s=64\u0026amp;f=gray \u0026quot;Image Title\u0026quot;)  Unordered list #   Item 1 Item 2 Item 3  Item 3a Item 3b Item 3c  Item 3a Item 3b Item 3c  Item 3a Item 3b Item 3c  Item 3a Item 3b Item 3c  Item 3a Item 3b Item 3c            Ordered list #   Step 1 Step 2 Step 3  Step 3.1  then this then this  Step 1  Step 1 Step 2  Step 1 Step 2 Step 3   Step 3   Step 2 Step 3     Step 3.2 Step 3.3    List in list #    Step 1\n  Step 2\n  Step 3\n Item 3a Item 3b Item 3c    For this\n do this  then this then this   do this too    "});index.add({'id':29,'href':'/kakao_i/apiref/sub1/','title':"태그가 있는 문서",'content':"이 문서의 태그에 \u0026ldquo;API 레퍼런스\u0026quot;가 포함돼 있습니다.\n"});})();